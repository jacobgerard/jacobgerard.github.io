<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Jacob Gerard</title>
        <link>https://jagerard.com/posts/</link>
        <description>Recent content in Posts on Jacob Gerard</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 24 Oct 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://jagerard.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Generic Data Structures in C</title>
            <link>https://jagerard.com/posts/structures/</link>
            <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>https://jagerard.com/posts/structures/</guid>
            <description>Idea I&amp;rsquo;ve been working on a few small programming projects over the past few weeks. C++ and it&amp;rsquo;s object oriented model makes generic data structures a lot simpler, but the syntax and bloat of everything gets a little complex. Recently I&amp;rsquo;ve been using C for most everything besides small web projects. I decided to build up my own little library of generic data structures so that I can just pull these into any projects moving forward.</description>
            <content type="html"><![CDATA[<h2 id="idea">Idea</h2>
<p>I&rsquo;ve been working on a few small programming projects over the past few weeks. C++ and it&rsquo;s object oriented model makes generic data structures a lot simpler, but the syntax and bloat of everything gets a little complex. Recently I&rsquo;ve been using C for most everything besides small web projects. I decided to build up my own little library of generic data structures so that I can just pull these into any projects moving forward. This should help prevent me from reinventing the wheel every time, but it has been fun to get back to the basics with this. Definitely not optimal solutions (I&rsquo;ll discuss that below), but they hit the gist of what I need.</p>
<h2 id="implementation">Implementation</h2>
<p>I opted to use void pointers and copy the contents of elements directly into the structure. This keeps the data nearby in most structures so I reduce page faults from following pointers around the heap, but adds a memory copy during the initialization of a new element. I am willing to make that sacrifice since most of my projects will be accessing memory much more often than modifying it. But if I need to do things the other way then I&rsquo;ll make adjustments as necessary.</p>
<p>The other disadvantage of using these void pointers is that it could get confusing if you try to access things without saving function pointers to print or compare elements. I wrote the code so I know that if I just stick to the public functions things should be fine. But trying to make direct accesses to the internals of these structures could cause a lot of problems.</p>
<p>Overall this experience has definitely highlighted the advantage of using a language like C++ for stronger types and operator overloading. But I&rsquo;m happy I gave it a shot and know that it will come in handy moving forward. I will post the more complete set of code on my GitHub, but below is a short example of how I was managing the generics in my structures. I plan on providing a useful and working implementation of Array List, Linked List, Binary Search Tree, AVL Tree, B-Tree, and Hash Table.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">struct</span> alist{
    size_t elementsize;
    size_t maxsize;
    size_t size;
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>list;
};

<span style="color:#66d9ef">struct</span> alist <span style="color:#f92672">*</span><span style="color:#a6e22e">alist_init</span>(size_t elementsize, size_t maxsize){
    <span style="color:#66d9ef">struct</span> alist <span style="color:#f92672">*</span>list <span style="color:#f92672">=</span> malloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#f92672">*</span>list));
    list<span style="color:#f92672">-&gt;</span>elementsize <span style="color:#f92672">=</span> elementsize;
    list<span style="color:#f92672">-&gt;</span>maxsize <span style="color:#f92672">=</span> maxsize;
    list<span style="color:#f92672">-&gt;</span>size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    list<span style="color:#f92672">-&gt;</span>list <span style="color:#f92672">=</span> malloc(elementsize <span style="color:#f92672">*</span> maxsize);
    <span style="color:#66d9ef">if</span>(list<span style="color:#f92672">-&gt;</span>list <span style="color:#f92672">==</span> NULL){
        <span style="color:#66d9ef">return</span> NULL;
    }
    <span style="color:#66d9ef">return</span> list;
}

<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">alist_insert</span>(<span style="color:#66d9ef">struct</span> alist <span style="color:#f92672">*</span>list, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> position, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>valptr){
    ...
    uint8_t <span style="color:#f92672">*</span>array <span style="color:#f92672">=</span> list<span style="color:#f92672">-&gt;</span>list;
    memcpy(<span style="color:#f92672">&amp;</span>array[position <span style="color:#f92672">*</span> list<span style="color:#f92672">-&gt;</span>elementsize], valptr, list<span style="color:#f92672">-&gt;</span>elementsize);
    ...
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>https://jagerard.com/posts/hello-world/</link>
            <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>https://jagerard.com/posts/hello-world/</guid>
            <description>I&amp;rsquo;m a computer science graduate interested in cyber security and systems programming. I don&amp;rsquo;t currently work in a technical role that would be beneficial to getting a job in the cyber field. There is a plan in place for that to change in the next few years, but in the meantime I figured that a blog would give me a platform to showcase my studies, projects, and research. It will also (hopefully) motivate me to keep moving in the right direction during my free time!</description>
            <content type="html"><![CDATA[<p>I&rsquo;m a computer science graduate interested in cyber security and systems programming. I don&rsquo;t currently work in a technical role that would be beneficial to getting a job in the cyber field. There is a plan in place for that to change in the next few years, but in the meantime I figured that a blog would give me a platform to showcase my studies, projects, and research. It will also (hopefully) motivate me to keep moving in the right direction during my free time!</p>
<p>I expect that the majority of my posts here will be short updates on what I&rsquo;ve been researching, interesting challenges or courses I&rsquo;ve finished, and comments on current events in the industry. All this comes with the ambitious goal of eventually passing the OSCP. I don&rsquo;t know if it is possible in the next few years, but setting my sights high will at least put me in a comfortable position for when I transition to a new career field down the road.</p>
<p>If you are interested in any of my posts, have advice for the best ways to move forward, or just want to chat, then feel free to send me an email. I&rsquo;m looking forward to hopping into the work and hope to share some good bits of information with you soon.</p>
]]></content>
        </item>
        
    </channel>
</rss>
